<?
require_once 'inc_security.php';

class HomeAjax extends AjaxCommon
{
    var $config;
    var $start_menu = array();

    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        //lấy ra configuration
        $db_query = new db_query('SELECT * FROM configurations LIMIT 1');
        $this->config = mysqli_fetch_assoc($db_query->result);
        unset($db_query);
        $this->start_menu = json_decode(base64_decode($this->config['con_start_menu']), 1);
    }

    public function getCurrentDeskDetail()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        if (!$desk_id) {
            return;
        }
        check_desk_exist($desk_id);
        $db_query = new db_query('SELECT * FROM current_desk
                                  LEFT JOIN desks ON des_id = cud_desk_id
                                  LEFT JOIN sections ON sec_id = des_sec_id
                                  WHERE cud_desk_id = ' . $desk_id);
        $desk_data = mysqli_fetch_assoc($db_query->result);
        unset($db_query);
        if (!$desk_data) {
            //Nếu bàn chưa mở thì gọi đến hàm openDesk để tạo bàn
            $this->openDesk();
            return;
        }
        $array_return = $desk_data;
        //list menu của bàn này
        $list_menu = $this->getListMenu($desk_id);
        //trả dữ liệu về dạng array
        $array_list_menu = $this->getArrayMenu($desk_id);

        $array_return['list_menu'] = $list_menu;
        $array_return['array_menu'] = $array_list_menu;
        $array_return['start_time_string'] = date('d/m/Y H:i', $desk_data['cud_start_time']);
        //Lấy ra tên nhân viên/tên khách hàng
        if (!$array_return['cud_customer_id']) {
            $array_return['customer_name'] = 'Khách lẻ';
        } else {
            //select từ database
            $db_query = new db_query('SELECT * FROM customers WHERE cus_id = ' . $desk_data['cud_customer_id'] . ' LIMIT 1');
            $customer = mysqli_fetch_assoc($db_query->result);
            unset($db_query);
            $array_return['customer_name'] = $customer['cus_name'];
        }
        if (!$array_return['cud_staff_id']) {
            //không chọn nhân viên
            $array_return['staff_name'] = 'Không chọn nhân viên';
        } else {
            //select từ database
            $db_query = new db_query('SELECT * FROM users WHERE use_id = ' . $desk_data['cud_staff_id'] . ' LIMIT 1');
            $staff = mysqli_fetch_assoc($db_query->result);
            unset($db_query);
            $array_return['staff_name'] = $staff['use_name'];
        }
        $array_return['customer_code'] = format_codenumber($array_return['cud_customer_id'], 6, PREFIX_CUSTOMER_CODE);
        $array_return['staff_code'] = format_codenumber($array_return['cud_staff_id'], 6, PREFIX_STAFF_CODE);

        $this->add($array_return);
    }

    public function deleteDesk()
    {
		try {
			checkPermission('delete');
		}catch (Exception $e) {
			$this->add(array('success'=>0,'error'=>'Vui lòng liên hệ quản trị viên để hủy bàn'));
			return;
		}
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        if (!$desk_id) {
            return;
        }
        check_desk_exist($desk_id);
        //xóa bàn hiện tại
        $db_query = new db_execute('DELETE FROM current_desk WHERE cud_desk_id = ' . $desk_id);
        unset($db_query);
        // xoa thuc don trong ban
        $deleteDeskMenu = new db_execute('DELETE FROM current_desk_menu WHERE cdm_desk_id = ' . $desk_id);
        unset($deleteDeskMenu);
        log_action(ACTION_LOG_DELETE,'Hủy bàn ID ' . $desk_id);
        $this->add(array('success' => 1));
    }

    public function deleteMenu()
    {
        $menu_id = getValue('menu_id', 'int', 'POST', 0);
        $desk_id = getValue('desk_id','int','POST',0);
        if (!$menu_id || !$desk_id) {
            echo 'error!';
            return;
        }
        check_desk_exist($desk_id);
        // xoa thuc don trong ban
        $db_deleteMenu = new db_execute('DELETE FROM current_desk_menu
                                         WHERE cdm_menu_id = ' . $menu_id . '
                                            AND cdm_desk_id = '.$desk_id.'
                                         AND cdm_printed_number = 0');

        if($db_deleteMenu->total) {
            unset($deleteMenu);
            $this->add(array('success' => 1));
            log_action(ACTION_LOG_DELETE,'Hủy thực đơn ID '. $menu_id .' ở bàn ID ' . $desk_id);
        }else{
            $this->add(array('success'=>0,'error'=>'Thực đơn đã in bếp, bạn không thể hủy bỏ thực đơn này'));
        }
    }

    public function openDesk()
    {
        //Phần này sẽ trả về json - khai báo biến chứa array kết quả trả về
        $array_return = array();

        //Kiểm tra xem bàn hiện tại đã mở chưa
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        if (!$desk_id) {
            return;
        }
        check_desk_exist($desk_id);
        $db_query = new db_query('SELECT * FROM current_desk WHERE cud_desk_id = ' . $desk_id);
        $desk_data = mysqli_fetch_assoc($db_query->result);
        unset($db_query);
        if ($desk_data) {
            //Nếu bàn đang mở thì show ra
            $this->getCurrentDeskDetail();
            return;
        }
        //nếu không thì mở bàn
        //khai báo các giá trị default khi mở bàn
        $cud_start_time = time();
        $cud_note = '';
        $cud_desk_id = $desk_id; //id bàn
        $cud_customer_id = 0;//id khách hàng
        $cud_staff_id = 0;//id nhân viên phục vụ
        $cud_extra_fee = 0; //phụ phí tính theo %
        $cud_vat = 0;//thuế VAT tính theo %
        $cud_customer_discount = 0;//giảm giá áp dụng cho loại khách
        $cud_debit = 0;//ghi nợ hay ko?
        $cud_pay_type = PAY_TYPE_CASH;//loại thanh toán là tiền mặt hay qua thẻ

        $array_return['cud_start_time'] = $cud_start_time;
        $array_return['start_time_string'] = date('d/m/Y H:i', $cud_start_time);
        $array_return['cud_note'] = $cud_note;
        $array_return['cud_desk_id'] = $cud_desk_id;
        $array_return['cud_customer_id'] = $cud_customer_id;
        $array_return['cud_staff_id'] = $cud_staff_id;
        $array_return['cud_extra_fee'] = $cud_extra_fee;
        $array_return['cud_vat'] = $cud_vat;
        $array_return['cud_customer_discount'] = $cud_customer_discount;
        $array_return['cud_debit'] = $cud_debit;
        $array_return['cud_pay_type'] = $cud_pay_type;

        $myform = new generate_form();
        $myform->addTable('current_desk');
        $myform->add('cud_desk_id', 'cud_desk_id', 1, 1, $cud_desk_id);
        $myform->add('cud_customer_id', 'cud_customer_id', 1, 1, $cud_customer_id);
        $myform->add('cud_staff_id', 'cud_staff_id', 1, 1, $cud_staff_id);
        $myform->add('cud_note', 'cud_note', 0, 1, $cud_note);
        $myform->add('cud_start_time', 'cud_start_time', 1, 1, $cud_start_time);
        $myform->add('cud_extra_fee', 'cud_extra_fee', 3, 1, $cud_extra_fee);
        $myform->add('cud_vat', 'cud_vat', 3, 1, $cud_vat);
        $myform->add('cud_customer_discount', 'cud_customer_discount', 3, 1, $cud_customer_discount);
        $myform->add('cud_debit', 'cud_debit', 1, 1, $cud_debit);
        $myform->add('cud_pay_type', 'cud_pay_type', 1, 1, $cud_pay_type);
        //insert to current_desk
        $db_execute = new db_execute($myform->generate_insert_SQL());
        unset($db_execute);

        //lấy ra thông tin về menu mở bàn
        $list_menu = '';
        $this->list->add('', 'Tên thực đơn');
        $this->list->add('', 'ĐVT');
        $this->list->add('', 'SL');
        $this->list->add('', 'Đơn giá');
        $this->list->add('', 'Giảm');
        $this->list->add('', 'Thành tiền');
        $menu_start = array(0);
        if ($this->start_menu) {
            foreach ($this->start_menu as $men_id => $men_number) {
                $menu_start[] = $men_id;
            }
        }
        $menu_start = implode(',', $menu_start);
        $db_count = new db_count('SELECT count(*) AS count
                                  FROM menus
                                  WHERE men_id IN(' . $menu_start . ')');
        $total = $db_count->total;
        unset($db_count);

        $db_listing = new db_query('SELECT *
                                    FROM menus
                                    WHERE men_id IN(' . $menu_start . ')' . $this->list->limit($total));
        $total_row = mysqli_num_rows($db_listing->result);
        $list_menu .= $this->list->showHeader($total_row);

        $i = 0;
        $array_unit = array();
        $db_query = new db_query('SELECT * FROM units');
        while ($row = mysqli_fetch_assoc($db_query->result)) {
            $array_unit[$row['uni_id']] = $row['uni_name'];
        }
        while ($row = mysqli_fetch_assoc($db_listing->result)) {
            $i++;
            $list_menu .= $this->list->start_tr($i, $row['men_id'], 'onclick="selectMenuInDesk(' . $row['men_id'] . ')" class="menu-normal record-item" data-record_id="' . $row['men_id'] . '"');
            /* code something */
            //Thành tiền - công thức tính bằng giá * (100 - %giảm giá) * số lượng
            $menu_item_number = $this->start_menu[$row['men_id']];
            $menu_item_price = $row['men_price'];
            $menu_item_discount = 0;
            $menu_item_total = $menu_item_number * (100 - $menu_item_discount) / 100 * $menu_item_price;
            $list_menu .= '<td class="text-left" width="200px;">' . $row['men_name'] . '</td>';
            $list_menu .= '<td class="center">' . $array_unit[$row['men_unit_id']] . '</td>';
            $list_menu .= '<td class="center">' . $menu_item_number . '</td>';
            $list_menu .= '<td class="text-right">' . format_number($menu_item_price) . '</td>';
            //Giảm giá của menu - theo khuyến mại. hiện tại chưa có quản lý khuyến mại nên để 0 mặc định
            $list_menu .= '<td class="text-center">0</td>';
            $list_menu .= '<td class="text-right">' . format_number($menu_item_total) . '</td>';
            $list_menu .= $this->list->end_tr();

            //insert thông tin về menu mở bàn vào bảng current_desk_menu
            $sql = 'INSERT INTO current_desk_menu(cdm_desk_id, cdm_menu_id, cdm_number, cdm_price, cdm_price_type, cdm_create_time, cdm_updated_time)
                    VALUES (' . $desk_id . ',' . $row['men_id'] . ',' . $this->start_menu[$row['men_id']] . ',' . $row['men_price'] . ',"men_price", ' . time() . ', ' . time() . ')';
            $db_insert = new db_execute($sql);
            unset($db_insert);
        }
        $list_menu .= $this->list->showFooter();
        //log action
        log_action(ACTION_LOG_ADD, 'Tạo bàn ID: ' . $desk_id);

        $array_return['list_menu'] = $list_menu;
        $array_return['array_menu'] = $this->getArrayMenu($desk_id);

        $array_return['customer_code'] = format_codenumber($array_return['cud_customer_id'], 6, PREFIX_CUSTOMER_CODE);
        $array_return['customer_name'] = 'Khách lẻ';
        $array_return['staff_code'] = format_codenumber($array_return['cud_staff_id'], 6, PREFIX_STAFF_CODE);
        $array_return['staff_name'] = 'Không chọn nhân viên';

        $this->add($array_return);
    }

    /**
     * Hàm này thực hiện thao tác thêm menu vào bàn đang chọn
     * nếu bàn này chưa được mở thì ko thêm
     * nếu bàn đang mở thì insert on duplicate menu vào current_desk_menu
     */
    public function addMenuToDesk()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        $menu_id = getValue('menu_id', 'int', 'POST', 0);
        //option - thêm số lượng và loại giá
        $number = getValue('number', 'int', 'POST', 0);
        $price_type = getValue('price_type', 'str', 'POST', '');
        if (!$desk_id || !$menu_id) {
            return;
        }
        check_desk_exist($desk_id);
        $db_query = new db_query('SELECT * FROM current_desk WHERE cud_desk_id = ' . $desk_id);
        $desk_data = mysqli_fetch_assoc($db_query->result);
        //thêm thực đơn vào bàn đang mở
        //Kiểm tra xem bàn đã mở chưa, nếu chưa mở thì return luôn
        $db_check = new db_query('SELECT * FROM current_desk WHERE cud_desk_id = ' . $desk_id);
        if (!mysqli_num_rows($db_check->result)) {
            //Bàn chưa mở - return luôn
            return;
        }
        unset($db_check);
        //Lấy thông tin về menu này để insert - nếu có khuyến mại thì cũng cần lấy ra giá giảm
        $db_menu = new db_query('SELECT * FROM menus WHERE men_id = ' . $menu_id . ' LIMIT 1');
        $menu_data = mysqli_fetch_assoc($db_menu->result);

        //insert vào bảng current_desk_menu, nếu menu đã có thì update
        //nếu có thông tin về số lượng và loại giá thì insert theo số lượng và loại giá
        $cdm_number = $number > 0 ? $number : 1;
        $cdm_price_type = ($price_type && isset($menu_data[$price_type])) ? $price_type : 'men_price';
        $sql_insert = 'INSERT INTO current_desk_menu(cdm_desk_id, cdm_menu_id, cdm_number, cdm_price, cdm_price_type, cdm_create_time, cdm_updated_time)
                       VALUES (' . $desk_id . ',' . $menu_id . ',' . $cdm_number . ',' . $menu_data[$cdm_price_type] . ',"' . $cdm_price_type . '",' . time() . ', ' . time() . ')
                       ON DUPLICATE KEY
                       UPDATE cdm_number = cdm_number + ' . $cdm_number . ', cdm_price_type = "' . $cdm_price_type . '", cdm_updated_time = ' . time();
        $db_exe = new db_execute($sql_insert);
        unset($db_exe);
        $array_return = $desk_data;
        //list menu của bàn này
        $list_menu = $this->getListMenu($desk_id);
        $array_return['list_menu'] = $list_menu;
        //từ version 2 trả về array menu của bàn để build = js
        $array_menu = $this->getArrayMenu($desk_id);
        $array_return['array_menu'] = $array_menu;
        //log action
        log_action(ACTION_LOG_ADD, 'Thêm thực đơn ID: ' . $menu_id . ' vào bàn ID: ' . $desk_id);

        $this->add($array_return);
    }

    public function removeMenuFromDesk()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        $menu_id = getValue('menu_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        //Kiểm tra xem bàn đã mở chưa, nếu chưa mở thì return luôn
        $db_check = new db_query('SELECT * FROM current_desk WHERE cud_desk_id = ' . $desk_id);
        if (!mysqli_num_rows($db_check->result)) {
            //Bàn chưa mở - return luôn
            return;
        }
        unset($db_check);
        $sql_delete = 'DELETE FROM current_desk_menu
                       WHERE cdm_desk_id = ' . $desk_id . '
                            AND cdm_menu_id = ' . $menu_id . ' LIMIT 1';
        $db_delete = new db_execute($sql_delete);
        unset($db_delete);
        $array_return = array('success' => 1);
        //log action
        log_action(ACTION_LOG_ADD, 'Xóa thực đơn ID: ' . $menu_id . ' khỏi bàn ID: ' . $desk_id);
        $this->add($array_return);
    }

    private function getListMenu($desk_id)
    {
        $list_menu = '';
        $this->list->add('', 'Tên thực đơn');
        $this->list->add('', 'ĐVT');
        $this->list->add('', 'SL');
        $this->list->add('', 'Đơn giá');
        $this->list->add('', 'Giảm');
        $this->list->add('', 'Thành tiền');

        $db_count = new db_count('SELECT count(*) AS count
                                  FROM current_desk_menu
                                  WHERE cdm_desk_id = ' . $desk_id);
        $total = $db_count->total;
        unset($db_count);
        $db_listing = new db_query('SELECT *
                                    FROM current_desk_menu
                                    LEFT JOIN menus ON cdm_menu_id = men_id
                                    WHERE cdm_desk_id = ' . $desk_id . ' ' .
            $this->list->limit($total));
        $total_row = mysqli_num_rows($db_listing->result);
        $list_menu .= $this->list->showHeader($total_row);

        $i = 0;
        $array_unit = array();
        $db_query = new db_query('SELECT * FROM units');
        while ($row = mysqli_fetch_assoc($db_query->result)) {
            $array_unit[$row['uni_id']] = $row['uni_name'];
        }
        while ($row = mysqli_fetch_assoc($db_listing->result)) {
            //Thành tiền - công thức tính bằng giá * (100 - %giảm giá)/100 * số lượng
            $menu_item_price = $row['cdm_price'];
            $menu_item_discount = $row['cdm_menu_discount'];
            $menu_item_number = $row['cdm_number'];
            $menu_item_total = $menu_item_number * (100 - $menu_item_discount) / 100 * $menu_item_price;
            //xác định ảnh, nếu ảnh menu ko tồn tại thì thay bằng ảnh mặc định
            $row['men_image'] = $row['men_image'] ? get_picture_path($row['men_image']) : '';
            $menu_unit_name = isset($array_unit[$row['men_unit_id']]) ? $array_unit[$row['men_unit_id']] : '';
            $i++;
            $list_menu .= $this->list->start_tr($i, $row['men_id'], 'onclick="selectMenuInDesk(' . $row['men_id'] . ')" class="menu-desk-menu record-item" data-record_id="' . $row['men_id'] . '" data-men_name="' . $row['men_name'] . '" data-men_image="' . $row['men_image'] . '" data-men_price="' . format_number($row['men_price']) . '" data-men_price1="' . format_number($row['men_price1']) . '" data-men_price2="' . format_number($row['men_price2']) . '" data-cdm_price="' . format_number($row['cdm_price']) . '" data-cdm_price_type="' . $row['cdm_price_type'] . '" data-cdm_menu_discount="' . $row['cdm_menu_discount'] . '" data-cdm_number="' . $row['cdm_number'] . '"');
            $list_menu .= '<td class="text-left" width="200px">' . $row['men_name'] . '</td>';
            $list_menu .= '<td class="center">' . $menu_unit_name . '</td>';
            $list_menu .= '<td class="text-center">' . $menu_item_number . '</td>';
            $list_menu .= '<td class="text-right">' . format_number($menu_item_price) . '</td>';
            $list_menu .= '<td class="text-center">' . number_format($menu_item_discount, 2) . '</td>';
            $list_menu .= '<td class="text-right">' . format_number($menu_item_total) . '</td>';
            $list_menu .= $this->list->end_tr();
        }
        $list_menu .= $this->list->showFooter();
        return $list_menu;
    }

    private function getArrayMenu($desk_id)
    {
        $sql_menu = 'SELECT *,uni_name AS men_unit
                     FROM current_desk_menu
                     LEFT JOIN menus ON men_id = cdm_menu_id
                     LEFT JOIN units ON uni_id = men_unit_id
                     WHERE cdm_desk_id = ' . $desk_id;
        $db_query = new db_query($sql_menu);
        $array_data = array();
        while ($row = mysqli_fetch_assoc($db_query->result)) {
            $row['men_image'] = $row['men_image'] ? get_picture_path($row['men_image']) : '';
            $array_data[] = $row;
        }
        return $array_data;
    }

    public function selectPriceType()
    {
        //update loại giá áp dụng cho menu hiện tại của bàn hiện tại
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        $menu_id = getValue('menu_id', 'int', 'POST', 0);
        $price_type = getValue('price_type', 'str', 'POST', '', 3);
        if (!$desk_id || !$menu_id || !$price_type) {
            return;
        }
        switch ($price_type) {
            case 'men_price':
            case 'men_price1':
            case 'men_price2':
                break;
            default :
                $price_type = 'men_price';
                break;
        }
        //lấy ra giá của menu
        $db_price = new db_query('SELECT * FROM menus WHERE men_id = ' . $menu_id);
        $price = mysqli_fetch_assoc($db_price->result);
        unset($db_price);
        $price = intval($price[$price_type]);
        //update lựa chọn giá
        $db_update = new db_execute('UPDATE current_desk_menu SET cdm_price = ' . $price . ', cdm_price_type = "' . $price_type . '"
                                     WHERE cdm_menu_id = ' . $menu_id . ' AND cdm_desk_id = ' . $desk_id);
        unset($db_update);

        //log action
        log_action(ACTION_LOG_EDIT, 'Cập nhật chọn loại giá ' . $price_type . ' thực đơn ID' . $menu_id . ' bàn ID: ' . $desk_id);

        $array_return = array();
        $array_return['cdm_price'] = format_number($price);
        $array_return['price'] = $price;
        $array_return['price_type'] = $price_type;
        $this->add($array_return);
    }

    public function loadFormCustomizePrice()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        $menu_id = getValue('menu_id', 'int', 'POST', 0);
        $array_return = array();
        if (!$desk_id || !$menu_id) {
            $array_return['error'] = 'Bàn chưa được mở hoặc bạn chưa chọn thực đơn để thực hiện';
        }
        //kiểm tra xem menu này có được điều chỉnh giá khi bán không?
        $db_check = new db_query('SELECT men_editable FROM menus WHERE men_id = ' . $menu_id);
        $check = mysqli_fetch_assoc($db_check->result);
        unset($db_check);
        if (!$check['men_editable']) {
            //Không thể sửa giá khi bán
            $array_return['error'] = 'Thực đơn này không cho phép thay đổi giá khi bán';
        }
        $html = '';
        $html .= $this->openMindows(1);
        $html .= '<div class="content-mini-window form-customize-price">
                    <div class="form-group">
                        <label class="text-center">Nhập giá tùy chỉnh</label>
                        <div class="input-group">
                              <input type="text" class="form-control text-right" data-role="auto-numeric" id="customize_price" value="0">
                              <span class="input-group-addon">' . DEFAULT_MONEY_UNIT . '</span>
                          </div>
                    </div>
                    <button class="btn btn-primary" onclick="customizePrice()">Đồng ý</button>
                </div>';
        $html .= $this->closeMindows(1);
        $html .= '<script type="text/javascript">' . $this->initAutoNumeric() . '</script>';

        $array_return['html'] = $html;
        $this->add($array_return);
    }

    function customizePrice()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        $menu_id = getValue('menu_id', 'int', 'POST', 0);
        $array_return = array();
        if (!$desk_id || !$menu_id) {
            $array_return['error'] = 'Bàn chưa được mở hoặc bạn chưa chọn thực đơn để thực hiện';
        }
        //kiểm tra xem menu này có được điều chỉnh giá khi bán không?
        $db_check = new db_query('SELECT men_editable FROM menus WHERE men_id = ' . $menu_id);
        $check = mysqli_fetch_assoc($db_check->result);
        unset($db_check);
        if (!$check['men_editable']) {
            //Không thể sửa giá khi bán
            $array_return['error'] = 'Thực đơn này không cho phép thay đổi giá khi bán';
        }
        //cập nhật giá
        $price = getValue('price', 'int', 'POST', 0);
        $db_update = new db_execute('UPDATE current_desk_menu
                                   SET cdm_price = ' . $price . '
                                   WHERE cdm_desk_id = ' . $desk_id . ' AND cdm_menu_id = ' . $menu_id . '
                                   LIMIT 1');
        if ($db_update->total) {
            $array_return['success'] = 1;
        } else {
            $array_return['error'] = 'Đã có lỗi xảy ra, vui lòng thử lại sau';
        }

        $this->add($array_return);
    }

    //Lựa chọn khách hàng của bàn
    function updateCustomer()
    {
        $array_return = array();
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        if (!$desk_id) {
            $array_return['error'] = 'Bàn chưa được mở';
            $this->add($array_return);
            return;
        }
        $cus_id = getValue('cus_id', 'int', 'POST', 0);
        //lấy ra thông tin về khách hàng + giảm giá của khách hàng
        $db_query = new db_query('SELECT cus_id,cus_cat_discount FROM customers
                                  LEFT JOIN customer_cat ON customers.cus_cat_id = customer_cat.cus_cat_id
                                  WHERE cus_id = ' . $cus_id);
        //nếu không tồn tại khách hàng này thì return
        $customer_data = mysqli_fetch_assoc($db_query->result);
        unset($db_query);
        if (!$customer_data) {
            $array_return['error'] = 'Thông tin về khách hàng không tồn tại!';
            $this->add($array_return);
            return;
        }
        //update customer tới bàn này
        $db = new db_execute('UPDATE current_desk
                              SET cud_customer_id = ' . $cus_id . ',
                              cud_customer_discount = ' . $customer_data['cus_cat_discount'] . '
                              WHERE cud_desk_id = ' . $desk_id . ' LIMIT 1');
        if ($db->total) {
            $array_return['success'] = 1;
        } else {
            $array_return['error'] = 'Không thể cập nhật thông tin khách hàng';
        }
        $this->add($array_return);
        //log action
        log_action(ACTION_LOG_EDIT, 'Thay đổi lựa chọn khách hàng ID (' . $cus_id . ') bàn ID ' . $desk_id);
    }

    //Lựa chọn nhân viên phục vụ
    function updateStaff()
    {
        $array_return = array();
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        if (!$desk_id) {
            $array_return['error'] = 'Bàn chưa được mở';
            $this->add($array_return);
            return;
        }
        $staff_id = getValue('staff_id', 'int', 'POST', 0);
        //update customer tới bàn này
        $db = new db_query('UPDATE current_desk SET cud_staff_id = ' . $staff_id . ' WHERE cud_desk_id = ' . $desk_id . ' LIMIT 1');
        $array_return['success'] = 1;
        $this->add($array_return);
        //log action
        log_action(ACTION_LOG_EDIT, 'Thay đổi nhân viên phục vụ ID (' . $staff_id . ') bàn ID ' . $desk_id);
    }

    //Thay đổi ghi chú của hóa đơn
    function updateNote()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        $note_text = getValue('note', 'str', 'POST', '', 3);
        $array_return = array();
        if (!$desk_id) {
            $array_return['error'] = 'Bàn chưa được mở';
            $this->add($array_return);
            return;
        }
        //update customer tới bàn này
        $db = new db_query('UPDATE current_desk SET cud_note = "' . $note_text . '" WHERE cud_desk_id = ' . $desk_id . ' LIMIT 1');
        $array_return['success'] = 1;
//        $array_return['sql'] = 'UPDATE current_desk SET cud_note = "' . $note_text . '" WHERE cud_desk_id = ' . $desk_id . ' LIMIT 1';
        $this->add($array_return);
        //log action
        log_action(ACTION_LOG_EDIT, 'Thay đổi ghi chú của hóa đơn ("' . $note_text . '") bàn ID ' . $desk_id);
    }

    //Thay đổi số lượng trong thực đơn
    function updateMenuNumber()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        $menu_id = getValue('menu_id', 'int', 'POST', 0);
        $number = getValue('number', 'int', 'POST', 0);
        $array_return = array();
        if (!$desk_id || !$menu_id) {
            $array_return['error'] = 'Bàn chưa được mở hoặc thực đơn chưa được chọn';
            $this->add($array_return);
            return;
        }
        if ($number < 0) {
            $array_return['error'] = 'Số lượng không thể nhỏ hơn 0';
            $this->add($array_return);
            return;
        }
        if (!is_numeric($number)) {
            $array_return['error'] = 'Số lượng phải là số nguyên';
            $this->add($array_return);
            return;
        }
        //cập nhật số lượng vào thực đơn
	    $sql = 'UPDATE current_desk_menu
                                 SET cdm_number = ' . $number . '
                                 WHERE cdm_desk_id = ' . $desk_id . '
                                    AND cdm_menu_id = ' . $menu_id . '
                                    AND cdm_printed_number < '.$number.'
                                 LIMIT 1';
        //bỏ qua check đã in bếp
        $sql = 'UPDATE current_desk_menu
                                 SET cdm_number = ' . $number . '
                                 WHERE cdm_desk_id = ' . $desk_id . '
                                    AND cdm_menu_id = ' . $menu_id . '
                                 LIMIT 1';
        $db_ex = new db_execute($sql);
        if(!$db_ex->total){
            $array_return['error'] = 'Thực đơn này đã in bếp, không thể giảm số lượng';
            $this->add($array_return);
            return;
        }
        $array_return['success'] = 1;
        $this->add($array_return);
        //log action
        log_action(ACTION_LOG_EDIT, 'Thay đổi số lượng thực đơn ID (' . $menu_id . ') bàn ID ' . $desk_id);
        return;
    }

    //Thay đổi giảm giá trong thực đơn
    function updateMenuDiscount()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        $menu_id = getValue('menu_id', 'int', 'POST', 0);
        $discount = getValue('discount', 'flo', 'POST', 0);
        $array_return = array();
        if (!$desk_id || !$menu_id) {
            $array_return['error'] = 'Bàn chưa được mở hoặc thực đơn chưa được chọn';
            $this->add($array_return);
            return;
        }
        if ($discount < 0) {
            $array_return['error'] = 'Giảm giá không thể nhỏ hơn 0';
            $this->add($array_return);
            return;
        }
        if ($discount > 100) {
            $array_return['error'] = 'Giảm giá không thể lớn hơn 100%';
            $this->add($array_return);
            return;
        }
        //cập nhật số lượng vào thực đơn
        $db_ex = new db_execute('UPDATE current_desk_menu
                                 SET cdm_menu_discount = ' . $discount . '
                                 WHERE cdm_desk_id = ' . $desk_id . ' AND cdm_menu_id = ' . $menu_id . '
                                 LIMIT 1');
        $array_return['success'] = 1;
        $this->add($array_return);
        //log action
        log_action(ACTION_LOG_EDIT, 'Thay đổi giảm giá thực đơn ID (' . $menu_id . ') bàn ID ' . $desk_id);
        return;
    }

    function updateExtraFee()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        if (!$desk_id) {
            $array_return['error'] = 'Bàn chưa được mở';
            $this->add($array_return);
            return;
        }
        $extra_fee = getValue('extra_fee', 'flo', 'POST', 0);
        if ($extra_fee < 0 || $extra_fee > 100) {
            $array_return['error'] = 'Phụ phí không hợp lệ';
            $this->add($array_return);
            return;
        }
        //cập nhật phụ phí vào hóa đơn
        $db_ex = new db_execute('UPDATE current_desk
                                 SET cud_extra_fee = ' . $extra_fee . '
                                 WHERE cud_desk_id = ' . $desk_id . '
                                 LIMIT 1');
        if ($db_ex->total) {
            $array_return['success'] = 1;
            $this->add($array_return);
            return;
        } else {
            $array_return['error'] = 'Không có bàn nào được cập nhật';
            $this->add($array_return);
            return;
        }
    }

    //cập nhật thuế vat
    public function updateVAT()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        if (!$desk_id) {
            $array_return['error'] = 'Bàn chưa được mở';
            $this->add($array_return);
            return;
        }
        $vat = getValue('vat', 'flo', 'POST', 0);
        if ($vat < 0 || $vat > 100) {
            $array_return['error'] = 'Thuế GTGT không hợp lệ';
            $this->add($array_return);
            return;
        }
        //cập nhật thuế GTGT vào hóa đơn
        $db_ex = new db_execute('UPDATE current_desk
                                 SET cud_vat = ' . $vat . '
                                 WHERE cud_desk_id = ' . $desk_id . '
                                 LIMIT 1');
        if ($db_ex->total) {
            $array_return['success'] = 1;
            $this->add($array_return);
            return;
        } else {
            $array_return['error'] = 'Không có bàn nào được cập nhật';
            $this->add($array_return);
            return;
        }
    }

    function updateCustomerDiscount()
    {
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        if (!$desk_id) {
            $array_return['error'] = 'Bàn chưa được mở';
            $this->add($array_return);
            return;
        }
        $discount = getValue('discount', 'flo', 'POST', 0);
        if ($discount < 0 || $discount > 100) {
            $array_return['error'] = 'Giảm giá không hợp lệ';
            $this->add($array_return);
            return;
        }
        //cập nhật giảm giá hóa đơn
        $db_ex = new db_execute('UPDATE current_desk
                                 SET cud_customer_discount = ' . $discount . '
                                 WHERE cud_desk_id = ' . $desk_id . '
                                 LIMIT 1');
        if ($db_ex->total) {
            $array_return['success'] = 1;
            $this->add($array_return);
            return;
        } else {
            $array_return['error'] = 'Không có bàn nào được cập nhật';
            $this->add($array_return);
            return;
        }
    }


    //Hàm thanh toán hóa đơn
    function billSubmit()
    {
        global $configuration, $admin_id;
        $array_return = array();
        //kiểm tra xem có hóa đơn nào thực hiện ko, nếu có thì exit luôn
        $db_trigger = new db_query('SELECT tri_status FROM triggers WHERE tri_key = "billSubmit" LIMIT 1');
        $trigger = mysqli_fetch_assoc($db_trigger->result);
        unset($db_trigger);
        if ($trigger['tri_status'] == 1) {
            //đang có hóa đơn được thanh toán, exit luôn
            $array_return['error'] = 'Đang có hóa đơn khác được thanh toán, bạn vui lòng thử lại trong giây lát!';
            $this->add($array_return);
            return false;
        }

        //bắt đầu xử lý hàm submit hóa đơn
        $desk_id = getValue('desk_id', 'int', 'POST', 0);
        check_desk_exist($desk_id);
        if (!$desk_id) {
            $array_return['error'] = 'Bàn chưa được mở';
            $this->add($array_return);
            return false;
        }
        //kiểm tra xem bàn có thực đơn nào không?
        $db_count = new db_count('SELECT count(*) AS count FROM current_desk_menu WHERE cdm_desk_id = ' . $desk_id);
        if (!$db_count->total) {
            $array_return['error'] = 'Không thể thanh toán hóa đơn trống';
            $this->add($array_return);
            return false;
        }

        //Kiểm tra tồn kho
        $db_desk = new db_query('SELECT
                                 *
                                FROM
                                    current_desk
                                LEFT JOIN current_desk_menu ON cud_desk_id = cdm_desk_id
                                WHERE cud_desk_id = ' . $desk_id);
        //mảng lưu list id thực đơn của bàn hiện tại
        $list_menu = array();
        //mảng lưu list số lượng tương ứng với từng thực đơn
        $list_quantity = array();
        //mảng lưu id của các thực đơn ko đủ số lượng tồn
        $disallow_menu = array();
        //mảng lưu thông tin về bàn
        $desk_detail = array();
        //mảng lưu thông tin về các thực đơn trong bàn
        $desk_menu_detail = array();
        while ($row = mysqli_fetch_assoc($db_desk->result)) {
            $desk_detail = $row;
            $desk_menu_detail[] = $row;
            $list_menu[] = $row['cdm_menu_id'];
            $list_quantity[$row['cdm_menu_id']] = $row['cdm_number'];
        }
        //lấy ra mảng số lượng tồn kho
        $allow_quantity = $this->calculateInventoryMenu($list_menu);
        //lặp qua mảng tồn kho để kiểm tra xem số lượng có đủ ko
        foreach ($allow_quantity as $men_id => $men_quantity) {
            if ($men_quantity < $list_quantity[$men_id]) {
                $disallow_menu[] = $men_id;
            }
        }
        //tinh tong tien can phai tra cua hoa don
        //mảng lưu tổng tiền của từng thực đơn trong bàn key=>value trong đó key : id thực đơn, value : tổng tiền thực đơn đó
        $array_money = array();
        //mảng lưu đơn giá của thực đơn
        $array_price = array();
        foreach ($desk_menu_detail as $cd_menu) {
            //select ra thong tin ve gia cua menu
            //neu menu duoc custom gia thi gia cua menu la gia cdm_price
            //neu menu khong duoc custom gia thi gia cua menu lay tu bang menu dua vao cdm_price_type
            $db_check = new db_query('SELECT men_editable, men_price, men_price1, men_price2
                                          FROM menus
                                          WHERE men_id = ' . $cd_menu['cdm_menu_id']);
            $cd_menu_detail = mysqli_fetch_assoc($db_check->result);
            unset($db_check);
            if ($cd_menu_detail['men_editable']) {
                //thực đơn cho phép chỉnh sửa giá : lấy giá của thực đơn trong cdm_price
                $array_money[$cd_menu['cdm_menu_id']] = $cd_menu['cdm_price'] * (1 - $cd_menu['cdm_menu_discount'] / 100) * $cd_menu['cdm_number'];
                $array_price[$cd_menu['cdm_menu_id']] = $cd_menu['cdm_price'];
            } else {
                //thực đơn không cho phép chỉnh sửa giá : lấy giá thực đơn theo cdm_price_type
                $array_money[$cd_menu['cdm_menu_id']] = $cd_menu_detail[$cd_menu['cdm_price_type']] * (1 - $cd_menu['cdm_menu_discount'] / 100) * $cd_menu['cdm_number'];
                $array_price[$cd_menu['cdm_menu_id']] = $cd_menu_detail[$cd_menu['cdm_price_type']];
            }
        }
        //kiểm tra ngày trả nợ - nếu nhỏ hơn ngày hiện tại thì đưa ra thông báo lỗi
        $debit = getValue('debit', 'int', 'POST', 0);
        $date_debit = getValue('date', 'str', 'POST', '');
        $date_debit = convertDateTime($date_debit, '0:0:0');
        if ($debit) {
            //có ghi nợ - kiểm tra ngày trả nợ
            if ($date_debit < time()) {
                $array_return['error'] = 'Ngày hẹn trả không phù hợp';
                $this->add($array_return);
                return false;
            }
        }
        //Kiểm tra xem có cho phép xuất âm kho hàng không
        //Hiện tại trong config không cho phép xuất âm - làm dần dần
        if (count($disallow_menu) > 0 && !$configuration['con_negative_export']) {
            //thực đơn không đủ số lượng tồn kho, đưa ra thông báo lỗi
            $array_return['error'] = 'Không thể xuất do không đủ số lượng tồn kho';
            $array_return['disallow_menu'] = json_encode($disallow_menu);
            $this->add($array_return);
            return false;
        } else {
            //Không có hóa đơn nào đang được xử lý - cập nhật trigger status thành 1 để bắt đầu vào hàm
            $db_update = new db_execute('UPDATE triggers SET tri_status = 1 WHERE tri_key = "billSubmit" LIMIT 1');
            unset($db_update);

            //bắt đầu tạo và thanh toán hóa đơn
            //trừ số lượng sản phẩm trong hóa đơn vào kho hàng
            foreach ($list_menu as $men_id) {
                //lấy ra các sản phẩm có trong thực đơn, sau đó trừ đi
                $db_product = new db_query('SELECT *
                                            FROM menu_products
                                            LEFT JOIN product_quantity ON product_id = mep_product_id
                                            WHERE mep_menu_id = ' . $men_id . '
                                            AND store_id = ' . $configuration['con_default_store']);
                while ($row_pro = mysqli_fetch_assoc($db_product->result)) {
                    $sql_minus = 'UPDATE product_quantity
                                  SET pro_quantity = pro_quantity - ' . ($row_pro['mep_quantity'] * $list_quantity[$row_pro['mep_menu_id']]) . '
                                  WHERE product_id = ' . $row_pro['product_id'] . ' AND store_id = ' . $configuration['con_default_store'];
                    $db_update = new db_execute($sql_minus);
                    unset($db_update);
                }
            }
            //sau khi trừ xong sản phẩm thì insert vào bảng thu chi và bảng hóa đơn
            //insert vào bảng hóa đơn bán hàng bill_in
            //giờ vào bàn
            $bii_start_time = $desk_detail['cud_start_time'];
            //giờ đóng bàn
            $bii_end_time = time();
            //id của bàn
            $bii_desk_id = $desk_id;
            //id kho xuất hàng
            $bii_store_id = $configuration['con_default_store'];
            //id quầy phục vụ
            $bii_service_desk_id = $configuration['con_default_svdesk'];
            //id khách hàng
            $bii_customer_id = $desk_detail['cud_customer_id'];
            //id nhân viên bán hàng
            $bii_staff_id = $desk_detail['cud_staff_id'];
            //id thu ngân - người lập hóa đơn
            $bii_admin_id = $admin_id;

            //loại thanh toán - tiền mặt hay thẻ.
            $bii_type = getValue('payType','int','POST',PAY_TYPE_CASH);
            $bii_type = $bii_type == PAY_TYPE_CASH ? PAY_TYPE_CASH : PAY_TYPE_CARD;
            //phụ phí
            $bii_extra_fee = $desk_detail['cud_extra_fee'];
            //thue VAT
            $bii_vat = $desk_detail['cud_vat'];
            //giam gia
            $bii_discount = $desk_detail['cud_customer_discount'];
            //tong tien
            $bii_true_money = 0;
            foreach ($array_money as $key => $money) {
                $bii_true_money += $money;
            }
            //tính giảm giá, thuế và phụ phí để ra số tiền thực tế
            $bii_true_money = $bii_true_money * (100 - $bii_discount + $bii_extra_fee)/100 * (100 + $bii_vat)/100;
            //tiền làm tròn
            $bii_round_money = round($bii_true_money, -3);
            if ($debit && $debit < $bii_true_money) {
                $bii_status = BILL_STATUS_DEBIT;
                $bii_money_debit = $bii_true_money - $debit;
                $bii_date_debit = $date_debit;
            } else {
                $bii_status = BILL_STATUS_SUCCESS;
                $bii_money_debit = 0;
                $bii_date_debit = 0;
            }

            //insert vào bảng bill_in
            $sql_insert = 'INSERT INTO bill_in (
                                bii_start_time,
                                bii_end_time,
                                bii_desk_id,
                                bii_store_id,
                                bii_customer_id,
                                bii_staff_id,
                                bii_admin_id,
                                bii_status,
                                bii_type,
                                bii_extra_fee,
                                bii_vat,
                                bii_discount,
                                bii_true_money,
                                bii_round_money,
                                bii_service_desk_id,
                                bii_money_debit,
                                bii_date_debit,
                                bii_note
                            )
                            VALUES (
                            ' . $bii_start_time . ',
                            ' . $bii_end_time . ',
                            ' . $bii_desk_id . ',
                            ' . $bii_store_id . ',
                            ' . $bii_customer_id . ',
                            ' . $bii_staff_id . ',
                            ' . $bii_admin_id . ',
                            ' . $bii_status . ',
                            ' . $bii_type . ',
                            ' . $bii_extra_fee . ',
                            ' . $bii_vat . ',
                            ' . $bii_discount . ',
                            ' . $bii_true_money . ',
                            ' . $bii_round_money . ',
                            ' . $bii_service_desk_id . ',
                            ' . $bii_money_debit . ',
                            ' . $bii_date_debit . ',
                            "'. $desk_detail['cud_note'].'"
                            )';
            $db_insert = new db_execute_return();
            $bill_success_id = $db_insert->db_execute($sql_insert);
            //insert chi tiết hóa đơn vào bảng bill_in_detail
            $sql_insert = 'INSERT INTO bill_in_detail (
                              bid_bill_id,
                              bid_menu_id,
                              bid_menu_discount,
                              bid_menu_number,
                              bid_menu_price
                           ) VALUES ';
            foreach ($desk_menu_detail as $cd_menu) {
                $sql_insert .= '(
                ' . $bill_success_id . ',
                ' . $cd_menu['cdm_menu_id'] . ',
                ' . $cd_menu['cdm_menu_discount'] . ',
                ' . $cd_menu['cdm_number'] . ',
                ' . $array_price[$cd_menu['cdm_menu_id']] . '),';
            }
            $sql_insert = rtrim($sql_insert, ',');
            $db_insert = new db_execute($sql_insert);
            unset($db_insert);

            //phát sinh 1 phiếu thu - insert dữ liệu vào phiếu thu
            //logic : hóa đơn ghi nợ thì phát sinh phiếu thu với 1 phần số tiền đã thu. hóa đơn trả đủ thì insert bình thường
            $fin_money = $bii_true_money;
            if ($debit) {
                $fin_money = $bii_true_money - $bii_money_debit;
            }
            //làm tròn số
            $fin_money = round($fin_money);
            //lấy thông tin khách hàng
            if ($bii_customer_id) {
                $db_customer = new db_query('SELECT * FROM customers WHERE cus_id = ' . $bii_customer_id . ' LIMIT 1');
                $customer = mysqli_fetch_assoc($db_customer->result);
                $fin_username = $customer['cus_name'];
                $fin_address = $customer['cus_address'];
            } else {
                $fin_username = 'Khách lẻ';
                $fin_address = '';
            }

            $sql_insert = 'INSERT INTO financial
                            (fin_date, fin_updated_time, fin_money, fin_reason_other,
                            fin_billcode, fin_username, fin_address, fin_cat_id,
                            fin_pay_type, fin_note, fin_admin_id, fin_agency_id)
                            VALUES
                            (
                            ' . $bii_end_time . ',
                            ' . $bii_end_time . ',
                            ' . $fin_money . ',
                            "Bán hàng",
                            "' . $bill_success_id . '",
                            "' . $fin_username . '",
                            "' . $fin_address . '",
                            ' . FINANCIAL_CAT_BAN_HANG . ',
                            ' . $bii_type . ',
                            "",
                            ' . $admin_id . ',
                            ' . $configuration['con_default_agency'] .'
                            )';
            $db_insert = new db_execute($sql_insert);
	        logs('log.txt', $sql_insert);
            if ($db_insert->total) {
                //thanh toán xong thì xóa bàn
                $db_delete_desk = new db_execute('DELETE FROM current_desk WHERE cud_desk_id = ' . $desk_id);
                $db_delete_desk = new db_execute('DELETE FROM current_desk_menu WHERE cdm_desk_id = ' . $desk_id);
                unset($db_insert, $db_delete_desk);
                //return lại mã hóa đơn
                $array_return['success'] = 1;
                $array_return['bii_id'] = $bill_success_id;
            } else {
                $array_return['error'] = 'Lỗi không rõ lý do';
            }
        }


        //thực hiện update trigger về 0 để giải phóng function
        $db_update = new db_execute('UPDATE triggers SET tri_status = 0 WHERE tri_key = "billSubmit" LIMIT 1');
        unset($db_update);

        //trả kết quả về client
        $this->add($array_return);
    }

    // hàm chuyển bàn ăn
    function moveDesk()
    {
        $from_desk = getValue('from_desk_id', 'int', 'POST', 0);
        check_desk_exist($from_desk);
        if (!$from_desk) {
            $array_return['error'] = 'Không tồn tại bàn cần chuyển';
            $this->add($array_return);
            return false;
        }
        $to_desk = getValue('to_desk_id', 'int', 'POST', 0);
        check_desk_exist($to_desk);
        if (!$to_desk) {
            $array_return['error'] = 'Chưa chọn bàn chuyển đến';
            $this->add($array_return);
            return false;
        }
        checkPermission('edit');
        // đổi tên id(from_desk) bàn cần chuyển thay thế id(to_desk) chuyển đến
        $db_update = 'UPDATE current_desk SET cud_desk_id = ' . $to_desk . ' WHERE cud_desk_id = ' . $from_desk . '';
        $db_excute = new db_execute($db_update);
        unset($db_excute);

        $db_update_menu = 'UPDATE current_desk_menu SET cdm_desk_id = ' . $to_desk . ' WHERE cdm_desk_id = ' . $from_desk . '';
        $db_excute_menu = new db_execute($db_update_menu);
        unset($db_excute_menu);
        $array_return['success'] = 1;
        $array_return['desk_id'] = $to_desk;
        $this->add($array_return);
        return false;
    }

    // ghép bàn ăn
    function joinDesk()
    {
        $from_desk = getValue('from_desk_id', 'int', 'POST', 0);
        check_desk_exist($from_desk);
        if (!$from_desk) {
            $array_return['error'] = 'Không tồn tại bàn cần chuyển';
            $this->add($array_return);
            return false;
        }
        $to_desk = getValue('to_desk_id', 'int', 'POST', 0);
        check_desk_exist($to_desk);
        if (!$to_desk) {
            $array_return['error'] = 'Chưa chọn bàn chuyển đến';
            $this->add($array_return);
            return false;
        }
        checkPermission('edit');
        $list_from_id = '';
        $db_query = new db_query('SELECT * FROM current_desk_menu WHERE cdm_desk_id = ' . $from_desk . '');
        while ($row = mysqli_fetch_assoc($db_query->result)) {
            // select tat cả các thực đơn được chuyển từ from_desk
            $list_from_id .= $row['cdm_menu_id'] . ',';
            $menu_id = $row['cdm_menu_id'];
            $cdm_number = $row['cdm_number'];
            $cdm_price = $row['cdm_price'];
            $cdm_price_type = $row['cdm_price_type'];
            $cdm_menu_discount = $row['cdm_menu_discount'];
            $cdm_create_time = $row['cdm_create_time'];
            $cdm_updated_time = $row['cdm_updated_time'];
            // sau đó insert các thực đơn từ from_desk(chuyển từ bàn) đến to_desk nếu trùng thực đơn thì tăng thêm số lượng và và giá tiền
            $db_update = 'INSERT INTO current_desk_menu(
                               cdm_desk_id,
                               cdm_menu_id,
                               cdm_number,
                               cdm_price,
                               cdm_price_type,
                               cdm_menu_discount,
                               cdm_create_time,
                               cdm_updated_time
                               )
                               VALUES
                               (' . $to_desk . ',' . $menu_id . ',' . $cdm_number . ',' . $cdm_price . ',"' . $cdm_price_type . '",' . $cdm_menu_discount . ',' . $cdm_create_time . ',' . $cdm_updated_time . ')
                               ON DUPLICATE KEY UPDATE cdm_number = cdm_number + ' . $cdm_number . ',cdm_price = cdm_price + ' . $cdm_price . ',';
            $db_update = rtrim($db_update, ',');
            $db_execute = new db_execute($db_update);
            unset($db_execute);
        }
        unset($db_query);
        // khi đã insert các thực đơn chuyển đến to_desk xóa các thực đơn từ bàn chuyển từ from_desk.
        $list_from_id = rtrim($list_from_id, ',');
        $db_delete = 'DELETE FROM current_desk_menu WHERE cdm_menu_id IN (' . $list_from_id . ') AND cdm_desk_id = ' . $from_desk . '';
        $db_excute_delete = new db_execute($db_delete);
        unset($db_excute_delete);


        // xóa bàn chuyển từ ( from_desk) trong bảng current_desk
        $del_current_desk = 'DELETE FROM current_desk WHERE cud_desk_id = ' . $from_desk . '';
        $db_current_desk = new db_execute($del_current_desk);
        unset($db_current_desk);

        $array_return['success'] = 1;
        $this->add($array_return);
        return false;
    }

    //tách hóa đơn
    function splitDesk()
    {
        global $configuration;
        $from_desk_id = getValue('from_desk_id', 'int', 'POST');
        check_desk_exist($from_desk_id);
        $to_desk_id = getValue('to_desk_id', 'int', 'POST');
        check_desk_exist($to_desk_id);
        $from_list_menu = getValue('from_list_menu', 'arr', 'POST', '');
        $to_list_menu = getValue('to_list_menu', 'arr', 'POST', '');
        //kiểm tra xem có thực đơn ở cả 2 bàn không?
        if (!$from_list_menu || !$to_list_menu) {
            $array_return = array('success' => 0, 'error' => 1, 'msg' => 'Chưa có thực đơn trong bàn');
            echo json_encode($array_return);
            die();
        }
        //kiểm tra xem bàn from có đang mở không?
        $db_check = new db_count('SELECT count(*) as count FROM current_desk WHERE cud_desk_id = ' . $from_desk_id);
        if (!$db_check->total) {
            $array_return = array('success' => 0, 'error' => 1, 'msg' => 'Bàn cần chuyển chưa được mở');
            echo json_encode($array_return);
            die();
        }
        //kiểm tra xem bàn được tách có không?
        $db_check = new db_count('SELECT count(*) as count
                                      FROM desks
                                      LEFT JOIN sections ON sec_id = des_sec_id
                                      LEFT JOIN service_desks ON sec_service_desk = sed_id
                                      WHERE sed_agency_id = ' . $configuration['con_default_agency'] . ' AND des_id = ' . $to_desk_id);
        if (!$db_check->total) {
            $array_return = array('success' => 0, 'error' => 1, 'msg' => 'Bàn được tách không tồn tại');
            echo json_encode($array_return);
            die();
        }
        //cập nhật thực đơn mới của bàn vừa bị tách
        $list_menu_exist = array();
        foreach ($from_list_menu as $menuItem) {
            $list_menu_exist[] = $menuItem['men_id'];
        }
        $list_menu_exist = implode(',', $list_menu_exist);
        $list_menu_exist_to = array();
        foreach ($to_list_menu as $menuItem) {
            $list_menu_exist_to[] = $menuItem['men_id'];
        }
        $list_menu_exist_to = implode(',', $list_menu_exist_to);
        if ($list_menu_exist_to) {
            //xử lý thực đơn của bàn được tách
            //đầu tiên tạo mới bàn
            $cud_start_time = time();
            $cud_customer_id = 0;
            $cud_staff_id = 0;
            $db = new db_execute('INSERT INTO current_desk(cud_desk_id, cud_start_time, cud_customer_id, cud_staff_id)
                              VALUES(' . $to_desk_id . ',' . $cud_start_time . ',' . $cud_customer_id . ',' . $cud_staff_id . ')');
            unset($db);
            //sao chép và thay đổi số lượng thực đơn từ bàn from sang bàn to
            $db = new db_execute('INSERT INTO current_desk_menu
                              SELECT ' . $to_desk_id . ' as cdm_desk_id, cdm_menu_id, cdm_number,cdm_price,cdm_price_type,cdm_menu_discount, ' . time() . ' as cdm_create_time, ' . time() . ' as cdm_updated_time
                              FROM current_desk_menu
                              WHERE cdm_desk_id = ' . $from_desk_id . ' AND cdm_menu_id IN(' . $list_menu_exist_to . ')');
            unset($db);
            //cập nhật số lượng mới từ mảng to_menu
            foreach ($to_list_menu as $menuItem) {
                $db = new db_execute('UPDATE current_desk_menu SET cdm_number = ' . $menuItem['men_number'] . '
                                      WHERE cdm_desk_id = ' . $to_desk_id . ' AND cdm_menu_id = ' . $menuItem['men_id']);
                unset($db);
            }
        }

        //thay đổi số lượng thực đơn của bàn gốc
        if ($list_menu_exist) {
            //xóa các thực đơn không có trong list menu
            $db = new db_execute('DELETE FROM current_desk_menu
                                  WHERE cdm_desk_id = ' . $from_desk_id . ' AND cdm_menu_id NOT IN(' . $list_menu_exist . ')');
        }
        //cập nhật số lượng với các thực đơn có trong list
        foreach ($from_list_menu as $menuItem) {
            $db = new db_execute('UPDATE current_desk_menu SET cdm_number = ' . $menuItem['men_number'] . '
                                  WHERE cdm_desk_id = ' . $from_desk_id . ' AND cdm_menu_id = ' . $menuItem['men_id']);
        }
        //trả kết quả về client
        $array_return = array('success' => 1, 'error' => 0, 'msg' => 'Tách bàn thành công');
        $this->add($array_return);
    }
}

$ajax = new HomeAjax();
$ajax->execute();